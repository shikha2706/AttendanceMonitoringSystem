/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectionProvider;
import java.awt.Color;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import utility.BDUtility;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.HashSet;
import java.util.Set;

/**
 *
 * @author vimal
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this,"images/abc1.jpg",1108, 514);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(3,3,3,3,Color.BLACK));
        
        dateChooserFrom.setDateFormatString("yyyy-MM-dd");
        dateChooserTo.setDateFormatString("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        dateChooserTo = new com.toedter.calendar.JDateChooser();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxContact = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        checkBoxUniqueRegId = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1101, 501));
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        jLabel1.setText("Attendance Track");

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("x");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        dateChooserTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserToPropertyChange(evt);
            }
        });

        dateChooserFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserFromPropertyChange(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel2.setText("On / From");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel3.setText("To");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel4.setText("Search");

        presentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        presentLBL.setText("Parent :");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(102, 255, 102));
        lblPresent.setText("---------");

        absentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        absentLBL.setText("Absent :");

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 0, 0));
        lblAbsent.setText("---------");

        checkBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxAddress.setText("Address");
        checkBoxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAddressItemStateChanged(evt);
            }
        });
        checkBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAddressActionPerformed(evt);
            }
        });

        checkBoxContact.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxContact.setText("Contact");
        checkBoxContact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxContactItemStateChanged(evt);
            }
        });
        checkBoxContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxContactActionPerformed(evt);
            }
        });

        checkBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxCountry.setText("Country");
        checkBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCountryItemStateChanged(evt);
            }
        });
        checkBoxCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCountryActionPerformed(evt);
            }
        });

        checkBoxUniqueRegId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxUniqueRegId.setText("Unique Reg ID");
        checkBoxUniqueRegId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxUniqueRegIdItemStateChanged(evt);
            }
        });
        checkBoxUniqueRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxUniqueRegIdActionPerformed(evt);
            }
        });

        checkBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxState.setText("State");
        checkBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxStateItemStateChanged(evt);
            }
        });
        checkBoxState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStateActionPerformed(evt);
            }
        });

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(absentLBL)
                                    .addComponent(presentLBL))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblPresent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAbsent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(checkBoxUniqueRegId)
                            .addComponent(checkBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetFilters)
                        .addGap(17, 17, 17)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(327, 327, 327)
                        .addComponent(btnExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnExit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dateChooserFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateChooserTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(presentLBL)
                        .addComponent(lblPresent)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absentLBL)
                            .addComponent(lblAbsent))
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxContact)
                        .addGap(27, 27, 27)
                        .addComponent(checkBoxAddress)
                        .addGap(29, 29, 29)
                        .addComponent(checkBoxState)
                        .addGap(28, 28, 28)
                        .addComponent(checkBoxCountry)
                        .addGap(30, 30, 30)
                        .addComponent(checkBoxUniqueRegId)
                        .addGap(28, 28, 28)
                        .addComponent(btnResetFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(23, 23, 23))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed

        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void checkBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAddressActionPerformed

    private void checkBoxContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxContactActionPerformed

    private void checkBoxCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCountryActionPerformed

    private void checkBoxUniqueRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxUniqueRegIdActionPerformed

    private void checkBoxStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxStateActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
     txtSearch.setText("");
     dateChooserFrom.setDate(null);
     dateChooserTo.setDate(null);
     checkBoxContact.setSelected(false);
     checkBoxAddress.setSelected(false);
     checkBoxState.setSelected(false);
     checkBoxCountry.setSelected(false);
     checkBoxUniqueRegId.setSelected(false);
     
     loadDataInTable();
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    private void checkBoxContactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxContactItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxContactItemStateChanged

    private void checkBoxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAddressItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxAddressItemStateChanged

    private void checkBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxStateItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateItemStateChanged

    private void checkBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCountryItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxCountryItemStateChanged

    private void checkBoxUniqueRegIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxUniqueRegIdItemStateChanged

    private void dateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserFromPropertyChange
loadDataInTable();
    }//GEN-LAST:event_dateChooserFromPropertyChange

    private void dateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserToPropertyChange
       loadDataInTable();
    }//GEN-LAST:event_dateChooserToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContact;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqueRegId;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private com.toedter.calendar.JDateChooser dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {
       List<String> columns =new ArrayList<>(Arrays.asList(
       "ID","Name","Gender","Email","Date","CheckIn","CheckOut","Work Duration"));
       
       String searchText=txtSearch.getText().toString();
       Date fromDateFromCal=dateChooserFrom.getDate();
       LocalDate fromDate=null;
       if(fromDateFromCal!=null){
           fromDate=fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
       }
       
       Date toDateFromCal=dateChooserTo.getDate();
       LocalDate toDate=null;
       if(toDateFromCal!=null){
           toDate=toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
       }
       Long daysBetween=null;
       if(fromDate!=null && toDate!=null){
           daysBetween=countWeekdays(fromDate,toDate);
       }
       
       Boolean contactIncluded=checkBoxContact.isSelected();
       Boolean addressIncluded=checkBoxAddress.isSelected();
       Boolean stateIncluded=checkBoxState.isSelected();
       Boolean countryIncluded=checkBoxCountry.isSelected();
       Boolean uniqueRegIdIncluded=checkBoxUniqueRegId.isSelected();
       
       String sqlQuery="SELECT ud.id,ud.name, ud.gender ,ud.email,ua.checkin,ua.checkout,ua.workduration";
       if(contactIncluded){
           columns.add("Contact");
           sqlQuery+=", ud.contact";
       }
       if(addressIncluded){
           columns.add("Address");
           sqlQuery+=",ud.address";
       }
       if(stateIncluded){
           columns.add("state");
           sqlQuery+=",ud.state";
       }
       if(countryIncluded){
           columns.add("Country");
           sqlQuery+=",ud.country";
       }
       if(uniqueRegIdIncluded){
           columns.add("Unique Reg Id");
           sqlQuery+=",ud.uniqueregid";
       }
       
       sqlQuery+="FROM userdetails As ud INNER JOIN userattendance AS us ON ud.id = us.userid";
       if(searchText!=null){
           sqlQuery+="where (ud.name like '%"+searchText+"%' or ud.email like '%"+searchText+"%') ";
           if(fromDate!=null&&toDate!=null){
               sqlQuery+="AND ua.date BETWEEN '"+fromDate+"' AND '"+toDate+"'";
           }else if(fromDate!=null){
               sqlQuery+="and ua.date= '"+fromDate +"'";
           }
       }else{
           if(fromDate!=null && toDate!=null){
               sqlQuery+="wher ua.date BETWEEN '"+fromDate + "' AND '"+toDate+"'";
               
           }else if(fromDate!=null){
               sqlQuery+="where ua.date='"+fromDate+"'";
           }
       }
       DefaultTableModel model=new DefaultTableModel();
       model.setColumnIdentifiers(columns.toArray());
       userTable.setModel(model);
       
       try{
           Connection con=ConnectionProvider.getCon();
           Statement st=con.createStatement();
           ResultSet rs=st.executeQuery(sqlQuery);
           Long presentCount=0l;
           Long absentCount=0l;
           Set<String>emailList=new HashSet<>();
           while(rs.next()){
               List<Object>row=new ArrayList<>();
               row.add(rs.getString("id"));
                row.add(rs.getString("name"));
               row.add(rs.getString("gender"));
                row.add(rs.getString("email"));
                emailList.add(rs.getString("email"));
                 row.add(rs.getString("date"));
                  row.add(rs.getString("checkIn"));
                   row.add(rs.getString("checkout"));
                    row.add(rs.getString("workduration"));
                    if(contactIncluded){
                        row.add(rs.getString("contact"));
                    }
                    if(addressIncluded){
                         row.add(rs.getString("address"));
                    }
                     if(stateIncluded){
                          row.add(rs.getString("state"));
                     }
                     if(countryIncluded){
                          row.add(rs.getString("country"));
                     }
                     if(uniqueRegIdIncluded){
                          row.add(rs.getString("uniqueregid"));
                     }
                     if(rs.getString("checkout")==null){
                         absentCount++;
                     }else{
                         presentCount++;
                     }
                     model.addRow(row.toArray());
           }
           if(emailList.size()==1){
               lblPresent.setVisible(true);
               lblAbsent.setVisible(true);
               presentLBL.setVisible(true);
               absentLBL.setVisible(true);
               lblPresent.setText(presentCount.toString());
               if(daysBetween!=null && daysBetween>0){
                   absentCount=daysBetween-presentCount;
               }
               lblAbsent.setText(absentCount.toString());
               
           }else{
               lblPresent.setVisible(false);
               lblAbsent.setVisible(false);
               presentLBL.setVisible(false);
               absentLBL.setVisible(false);
           }
       }catch(Exception ex){
           JOptionPane.showMessageDialog(null,"Something went wrong");
       }
    }
    private Long countWeekdays(LocalDate start,LocalDate end){
        long count=0;
        LocalDate date=start;
        while(date.isBefore(end) || date.equals(end)){
            if(!(date.getDayOfWeek()==DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)){
                count++;
            }
            date=date.plusDays(1);
        }
        return count;
    }
    
}
